@page "/q/{query}"
@inject HttpClient Http

<PageTitle>Trials - @query</PageTitle>

<h1>Trials - @query</h1>


@if (trials == null && trialCount == null)
{
<p><em>...fetching data from clinicaltrials.gov...</em></p>
} else if (trials == null && trialCount > 0) {
<p><em>...fetching @trialCount trials from clinicaltrials.gov...</em></p>
}
else if (trialCount == 0) {
    <p>no results for query</p>
}
else
{
    string? lastGroup = null;
    <table class="table">
        <thead>
            <tr>
            </tr>
        </thead>
        <tbody>
            @foreach (var trial in trials)
            {
                if (!trial.Closed)
                {
                    if (lastGroup != trial?.PhaseInfo?.Name) {
                        lastGroup = trial?.PhaseInfo?.Name;

                        <tr><td colspan=11 style=background:black;color:white;font-weight:bold>
                            @trial?.PhaseInfo?.Name
                        </td></tr>
                    }

                    <tr style=background:lightgrey;color:black>
                        <td colspan="2">
                            @((MarkupString)link("/q/", Uri.EscapeDataString(trial.LeadSponsorName[0]), trial.LeadSponsorName[0], newTab:false))
                            - @((MarkupString)links("/q/", trial.InterventionName, trial.InterventionName, " | ", newTab:false))</td>
                        <td style=font-size:12px>
                            @((MarkupString)link("https://beta.clinicaltrials.gov/study/"+@trial.NCTId[0], @trial.NCTId[0]))
                            <br/>@trial.LastUpdated.ToShortDateString()&nbsp;update
                        </td>
                    </tr>
                    <tr>
                        <td colspan=2>
                            <div style=margin-left:10px;font-size:12px>
                                @first(trial.BriefTitle)
                            </div>
                        </td>
                        <td style=font-size:12px>@trial.OverallStatusStyle @all(trial.WhyStopped)
                            <br/>@trial.EndDate&nbsp;end
                            <br/>@first(trial.EnrollmentCount) people
                        </td>
                    </tr>
                    <tr>
                        <td colspan=3><div style=margin-left:10px;font-size:12px>
                            Condition(s): @((MarkupString)links("/q/", trial.Condition, trial.Condition, " | ", newTab:false))
                        </div></td>
                    </tr>
                    @if(trial.SeeAlsoLinkURL.Count>0)
                    {
                        <tr>
                            <td colspan=3><div style=margin-left:10px;font-size:12px>
                                See Also: @((MarkupString)links(trial.SeeAlsoLinkURL,trial.SeeAlsoLinkLabel, " | "))
                            </div></td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table> 
}

@code {
    private string link(string linkUrl, string label, bool newTab = true) {
        return link("", linkUrl, label, newTab);
    }

    private string link(string urlPrefix, string linkUrl, string label, bool newTab = true) {
        return "<a " + (newTab?"target=_blank ":"") + "href=" + urlPrefix + linkUrl + ">" + label + "</a>";
    }

    private string links(string urlPrefix, List<string> linkStrings, List<string> labelStrings, string divider, bool newTab = true) {
        string? retString = null;
        for (int i = 0; i < linkStrings.Count; i++) {
            if (retString != null) { 
                retString += divider;
            } 

            retString += link(urlPrefix + Uri.EscapeDataString(linkStrings[i]), labelStrings[i], newTab:newTab);                
        }

        return retString;
    }

    private string links(List<string> linkStrings, List<string> labelStrings, string divider, bool newTab = true) {
        return links("", linkStrings, labelStrings, divider, newTab);
    }

    private string first(List<string> strings) {
        if (strings.Count > 0) {
            return strings[0];
        } else {
            return "";
        }
    }

    private string three(List<string> strings, string divider = " ") {
        return all(strings, 3, divider);
    }

    private string all(List<string> strings, string divider = " ") {
        return all(strings, -1, divider);
    }

    private string all(List<string> strings, int limit, string divider) {
        int count = 0;
        string? retString = null;
        foreach (var str in strings) {
            if (count++ == limit) {
                retString += divider + "...";
                break;
            }

            if (retString != null) {
                retString += divider;
            }

            retString += str;
        }

        return retString;
    }

    private IOrderedEnumerable<Trial>? trials = null;
    int? trialCount;
    [Parameter]
    public string? query { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        trials = null;
        trialCount = null;
        
        await UpdateAsync();        
    }

    protected async Task UpdateAsync()
    {
        List<Trial> trialList = null;
        var moreToGet = 1;
        var maxRank = 999;
        var minRank = 1;
    
        if (query == null || query?.Trim() == "") return;

        // var annotationsByTrial = {};
        // if (dataAnnotations != null) {
        //  for (var i = 0; i < dataAnnotations.data.length; i++) {
        //      annotationsByTrial[dataAnnotations.data[i].trial] = dataAnnotations.data[i];
        //  }
        // } 

        while (moreToGet > 0) {
            var url = "https://clinicaltrials.gov/api/query/study_fields?expr=" + Uri.EscapeDataString(query) 
            + "&fields=NCTId,Condition,LocationFacility,BriefTitle,StudyType,Phase,OverallStatus,WhyStopped,LeadSponsorName,InterventionName,StudyFirstPostDate,StartDate,StartDateType,LastUpdatePostDate,PrimaryCompletionDate,CompletionDate,SeeAlsoLinkURL,SeeAlsoLinkLabel,EnrollmentCount&fmt=JSON&min_rnk="+minRank.ToString()+"&max_rnk="+maxRank.ToString();

            var data = await Http.GetFromJsonAsync<QueryRoot>(url);

            if (data != null && data.StudyFieldsResponse != null) { // && "StudyFields" in data.StudyFieldsResponse) {
                trialCount = data.StudyFieldsResponse.NStudiesFound;
                foreach (var trial in data.StudyFieldsResponse.StudyFields) {
                    string? CompletionDate = null;
                    if (trial.CompletionDate.Count != 0) {
                        CompletionDate = trial.CompletionDate[0];
                    } else if (trial.PrimaryCompletionDate.Count != 0) {
                        CompletionDate = trial.PrimaryCompletionDate[0];
                    } else if (trial.LastUpdatePostDate.Count != 0) {
                        CompletionDate = trial.LastUpdatePostDate[0];
                    }

                    var lastPhase = trial.Phase.Count >= 1 ? trial.Phase[trial.Phase.Count-1] : "";
                    var firstPhase = trial.Phase.Count >= 1 ? trial.Phase[0] : "";

                    trial.PhaseInfo = Trial.GetPhaseInfo(lastPhase, firstPhase, trial.StudyType[0]);
                    trial.Closed = trial.GetClosedInfo();
                    trial.EndDate = DateTime.Parse(CompletionDate).ToShortDateString();

                    switch (trial.OverallStatus[0].ToString()) 
                    {
                        case "Enrolling by invitation":
                        case "Not yet recruiting":
                        case "Recruiting":
                        case "Approved for marketing":
                        case "Active, not recruiting":
                            trial.OverallStatusStyle = "Active";
                            break;
                        case "Unknown status":
                            trial.OverallStatusStyle = "Unknown";
                            break;
                        default:
                            trial.OverallStatusStyle = trial.OverallStatus.Count > 0 ? trial.OverallStatus[0] : null;
                            break;
                    }

                /*
                if (trial.NCTId in annotationsByTrial) {
                    trial.annotations = annotationsByTrial[trial.NCTId];
                } 
                */

                    if (trialList == null) {
                        trialList = new List<Trial>();
                    }

                    trialList.Add(trial);
                }

                if (trialCount > maxRank && maxRank < 5000)
                {
                    minRank = minRank + 999;
                    maxRank = maxRank + 999;
                    moreToGet = 1;
                } else {
                    moreToGet = 0;
                }
            }
        }

        trials = trialList?.OrderByDescending(i => i?.PhaseInfo?.Number).ThenByDescending(i => i.LastUpdated);
    }
}