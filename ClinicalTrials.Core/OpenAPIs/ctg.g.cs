//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace ClinicalTrials.Core
{
    using System.Text.Json.Serialization;
    using System;
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StudiesClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public StudiesClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://clinicaltrials.gov/api/v2";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Studies
        /// </summary>
        /// <remarks>
        /// Returns data of studies matching query and filter parameters. The studies are returned page by page.
        /// <br/>If response contains `nextPageToken`, use its value in `pageToken` to get next page.
        /// <br/>The last page will not contain `nextPageToken`. A page may have empty `studies` array.
        /// <br/>Request for each subsequent page **must** have the same parameters as for the first page, except
        /// <br/>`countTotal`, `pageSize`, and `pageToken` parameters.
        /// <br/>
        /// <br/>If neither queries nor filters are set, all studies will be returned.
        /// <br/>If any query parameter contains only NCT IDs (comma- and/or space-separated), filters are ignored.
        /// <br/>
        /// <br/>`query.*` parameters are in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax).
        /// <br/>Those parameters affect ranking of studies, if sorted by relevance. See `sort` parameter for details.
        /// <br/>
        /// <br/>`filter.*` and `postFilter.*` parameters have same effect as there is no aggregation calculation. 
        /// <br/>Both are available just to simplify applying parameters from search request.
        /// <br/>Both do not affect ranking of studies.
        /// <br/>
        /// <br/>Note: When trying JSON format in your browser, do not set too large `pageSize` parameter, if `fields` is
        /// <br/>unlimited. That may return too much data for the browser to parse and render.
        /// </remarks>
        /// <param name="format">Must be one of the following:
        /// <br/>* `csv`- return CSV table with one page of study data; first page will contain header with column names; available fields are listed on [CSV Download](/data-api/about-api/csv-download) page
        /// <br/>* `json`- return JSON with one page of study data; every study object is placed in a separate line; `markup` type fields format depends on `markupFormat` parameter</param>
        /// <param name="markupFormat">Format of `markup` type fields:
        /// <br/>* `markdown`- [markdown](https://spec.commonmark.org/0.28/) format
        /// <br/>* `legacy`- compatible with classic PRS
        /// <br/>
        /// <br/>Applicable only to `json` format.</param>
        /// <param name="query_cond">"Conditions or disease" query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax). See "ConditionSearch Area" on [Search Areas](/data-api/about-api/search-areas#ConditionSearch) for more details.</param>
        /// <param name="query_term">"Other terms" query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax). See "BasicSearch Area" on [Search Areas](/data-api/about-api/search-areas#BasicSearch) for more details.</param>
        /// <param name="query_locn">"Location terms" query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax). See "LocationSearch Area" on [Search Areas](/data-api/about-api/search-areas#LocationSearch) for more details.</param>
        /// <param name="query_titles">"Title / acronym" query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax). See "TitleSearch Area" on [Search Areas](/data-api/about-api/search-areas#TitleSearch) for more details.</param>
        /// <param name="query_intr">"Intervention / treatment" query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax). See "InterventionSearch Area" on [Search Areas](/data-api/about-api/search-areas#InterventionSearch) for more details.</param>
        /// <param name="query_outc">"Outcome measure" query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax). See "OutcomeSearch Area" on [Search Areas](/data-api/about-api/search-areas#OutcomeSearch) for more details.</param>
        /// <param name="query_spons">"Sponsor / collaborator" query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax). See "SponsorSearch Area" on [Search Areas](/data-api/about-api/search-areas#SponsorSearch) for more details.</param>
        /// <param name="query_lead">Searches in "LeadSponsorName" field. See [Study Data Structure](/data-api/about-api/study-data-structure#LeadSponsorName) for more details. The query is in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax).</param>
        /// <param name="query_id">"Study IDs" query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax). See "IdSearch Area" on [Search Areas](/data-api/about-api/search-areas#IdSearch) for more details.</param>
        /// <param name="query_patient">See "PatientSearch Area" on [Search Areas](/data-api/about-api/search-areas#PatientSearch) for more details.</param>
        /// <param name="filter_overallStatus">Filter by comma- or pipe-separated list of statuses</param>
        /// <param name="filter_geo">Filter by geo-function. Currently only distance function is supported.
        /// <br/>Format: `distance(latitude,longitude,distance)`</param>
        /// <param name="filter_ids">Filter by comma- or pipe-separated list of NCT numbers (a.k.a. ClinicalTrials.gov identifiers)</param>
        /// <param name="filter_advanced">Filter by query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax)</param>
        /// <param name="filter_synonyms">Filter by comma- or pipe-separated list of `area`:`synonym_id` pairs</param>
        /// <param name="postFilter_overallStatus">Filter by comma- or pipe-separated list of statuses</param>
        /// <param name="postFilter_geo">Filter by geo-function. Currently only distance function is supported.
        /// <br/>Format: `distance(latitude,longitude,distance)`</param>
        /// <param name="postFilter_ids">Filter by comma- or pipe-separated list of NCT numbers (a.k.a. ClinicalTrials.gov identifiers)</param>
        /// <param name="postFilter_advanced">Filter by query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax)</param>
        /// <param name="postFilter_synonyms">Filter by comma- or pipe-separated list of `area`:`synonym_id` pairs</param>
        /// <param name="aggFilters">Apply aggregation filters, aggregation counts will not be provided.
        /// <br/>The value is comma- or pipe-separated list of pairs `filter_id`:`space-separated list of option keys` for the checked options.</param>
        /// <param name="geoDecay">Set proximity factor by distance from `filter.geo` location to the closest [LocationGeoPoint](/data-api/about-api/study-data-structure#LocationGeoPoint) of a study.
        /// <br/>Ignored, if `filter.geo` parameter is not set or response contains more than 10,000 studies.</param>
        /// <param name="fields">If specified, must be non-empty comma- or pipe-separated list of fields to return. If unspecified, all fields will be returned.
        /// <br/>Order of the fields does not matter.
        /// <br/>
        /// <br/>For `csv` format, specify list of columns. The column names are available on [CSV Download](/data-api/about-api/csv-download).
        /// <br/>
        /// <br/>For `json` format, every list item is either area name, piece name, field name, or special name.
        /// <br/>If a piece or a field is a branch node, all descendant fields will be included.
        /// <br/>All area names are available on [Search Areas](/data-api/about-api/search-areas),
        /// <br/>the piece and field names — on [Data Structure](/data-api/about-api/study-data-structure) and also can be retrieved at `/studies/metadata` endpoint.
        /// <br/>There is a special name, `@query`, which expands to all fields queried by search.</param>
        /// <param name="sort">Comma- or pipe-separated list of sorting options of the studies. The returning studies are not sorted by default for a performance reason.
        /// <br/>Every list item contains a field/piece name and an optional sort direction (`asc` for ascending or `desc` for descending)
        /// <br/>after colon character.
        /// <br/>
        /// <br/>All piece and field names can be found on [Data Structure](/data-api/about-api/study-data-structure) and also can be retrieved
        /// <br/>at `/studies/metadata` endpoint. Currently, only date and numeric fields are allowed for sorting.
        /// <br/>There is a special "field" `@relevance` to sort by relevance to a search query.
        /// <br/>
        /// <br/>Studies missing sort field are always last. Default sort direction:
        /// <br/>* Date field - `desc`
        /// <br/>* Numeric field - `asc`
        /// <br/>* `@relevance` - `desc`</param>
        /// <param name="countTotal">Count total number of studies in all pages and return `totalCount` field with first page, if `true`.
        /// <br/>For CSV, the result can be found in `x-total-count` response header.
        /// <br/>The parameter is ignored for the subsequent pages.</param>
        /// <param name="pageSize">Page size is maximum number of studies to return in response. It does not have to be the same for every page.
        /// <br/>If not specified or set to 0, the default value will be used. It will be coerced down to  1,000, if greater than that.</param>
        /// <param name="pageToken">Token to get next page. Set it to a `nextPageToken` value returned with the previous page in JSON format.
        /// <br/>For CSV, it can be found in `x-next-page-token` response header.
        /// <br/>Do not specify it for first page.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PagedStudies> ListStudiesAsync(Format? format, MarkupFormat? markupFormat, string query_cond, string query_term, string query_locn, string query_titles, string query_intr, string query_outc, string query_spons, string query_lead, string query_id, string query_patient, System.Collections.Generic.IEnumerable<Status> filter_overallStatus, string filter_geo, System.Collections.Generic.IEnumerable<string> filter_ids, string filter_advanced, System.Collections.Generic.IEnumerable<string> filter_synonyms, System.Collections.Generic.IEnumerable<Status> postFilter_overallStatus, string postFilter_geo, System.Collections.Generic.IEnumerable<string> postFilter_ids, string postFilter_advanced, System.Collections.Generic.IEnumerable<string> postFilter_synonyms, string aggFilters, string geoDecay, System.Collections.Generic.IEnumerable<string> fields, System.Collections.Generic.IEnumerable<string> sort, bool? countTotal, int? pageSize, string pageToken)
        {
            return ListStudiesAsync(format, markupFormat, query_cond, query_term, query_locn, query_titles, query_intr, query_outc, query_spons, query_lead, query_id, query_patient, filter_overallStatus, filter_geo, filter_ids, filter_advanced, filter_synonyms, postFilter_overallStatus, postFilter_geo, postFilter_ids, postFilter_advanced, postFilter_synonyms, aggFilters, geoDecay, fields, sort, countTotal, pageSize, pageToken, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Studies
        /// </summary>
        /// <remarks>
        /// Returns data of studies matching query and filter parameters. The studies are returned page by page.
        /// <br/>If response contains `nextPageToken`, use its value in `pageToken` to get next page.
        /// <br/>The last page will not contain `nextPageToken`. A page may have empty `studies` array.
        /// <br/>Request for each subsequent page **must** have the same parameters as for the first page, except
        /// <br/>`countTotal`, `pageSize`, and `pageToken` parameters.
        /// <br/>
        /// <br/>If neither queries nor filters are set, all studies will be returned.
        /// <br/>If any query parameter contains only NCT IDs (comma- and/or space-separated), filters are ignored.
        /// <br/>
        /// <br/>`query.*` parameters are in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax).
        /// <br/>Those parameters affect ranking of studies, if sorted by relevance. See `sort` parameter for details.
        /// <br/>
        /// <br/>`filter.*` and `postFilter.*` parameters have same effect as there is no aggregation calculation. 
        /// <br/>Both are available just to simplify applying parameters from search request.
        /// <br/>Both do not affect ranking of studies.
        /// <br/>
        /// <br/>Note: When trying JSON format in your browser, do not set too large `pageSize` parameter, if `fields` is
        /// <br/>unlimited. That may return too much data for the browser to parse and render.
        /// </remarks>
        /// <param name="format">Must be one of the following:
        /// <br/>* `csv`- return CSV table with one page of study data; first page will contain header with column names; available fields are listed on [CSV Download](/data-api/about-api/csv-download) page
        /// <br/>* `json`- return JSON with one page of study data; every study object is placed in a separate line; `markup` type fields format depends on `markupFormat` parameter</param>
        /// <param name="markupFormat">Format of `markup` type fields:
        /// <br/>* `markdown`- [markdown](https://spec.commonmark.org/0.28/) format
        /// <br/>* `legacy`- compatible with classic PRS
        /// <br/>
        /// <br/>Applicable only to `json` format.</param>
        /// <param name="query_cond">"Conditions or disease" query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax). See "ConditionSearch Area" on [Search Areas](/data-api/about-api/search-areas#ConditionSearch) for more details.</param>
        /// <param name="query_term">"Other terms" query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax). See "BasicSearch Area" on [Search Areas](/data-api/about-api/search-areas#BasicSearch) for more details.</param>
        /// <param name="query_locn">"Location terms" query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax). See "LocationSearch Area" on [Search Areas](/data-api/about-api/search-areas#LocationSearch) for more details.</param>
        /// <param name="query_titles">"Title / acronym" query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax). See "TitleSearch Area" on [Search Areas](/data-api/about-api/search-areas#TitleSearch) for more details.</param>
        /// <param name="query_intr">"Intervention / treatment" query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax). See "InterventionSearch Area" on [Search Areas](/data-api/about-api/search-areas#InterventionSearch) for more details.</param>
        /// <param name="query_outc">"Outcome measure" query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax). See "OutcomeSearch Area" on [Search Areas](/data-api/about-api/search-areas#OutcomeSearch) for more details.</param>
        /// <param name="query_spons">"Sponsor / collaborator" query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax). See "SponsorSearch Area" on [Search Areas](/data-api/about-api/search-areas#SponsorSearch) for more details.</param>
        /// <param name="query_lead">Searches in "LeadSponsorName" field. See [Study Data Structure](/data-api/about-api/study-data-structure#LeadSponsorName) for more details. The query is in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax).</param>
        /// <param name="query_id">"Study IDs" query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax). See "IdSearch Area" on [Search Areas](/data-api/about-api/search-areas#IdSearch) for more details.</param>
        /// <param name="query_patient">See "PatientSearch Area" on [Search Areas](/data-api/about-api/search-areas#PatientSearch) for more details.</param>
        /// <param name="filter_overallStatus">Filter by comma- or pipe-separated list of statuses</param>
        /// <param name="filter_geo">Filter by geo-function. Currently only distance function is supported.
        /// <br/>Format: `distance(latitude,longitude,distance)`</param>
        /// <param name="filter_ids">Filter by comma- or pipe-separated list of NCT numbers (a.k.a. ClinicalTrials.gov identifiers)</param>
        /// <param name="filter_advanced">Filter by query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax)</param>
        /// <param name="filter_synonyms">Filter by comma- or pipe-separated list of `area`:`synonym_id` pairs</param>
        /// <param name="postFilter_overallStatus">Filter by comma- or pipe-separated list of statuses</param>
        /// <param name="postFilter_geo">Filter by geo-function. Currently only distance function is supported.
        /// <br/>Format: `distance(latitude,longitude,distance)`</param>
        /// <param name="postFilter_ids">Filter by comma- or pipe-separated list of NCT numbers (a.k.a. ClinicalTrials.gov identifiers)</param>
        /// <param name="postFilter_advanced">Filter by query in [Essie expression syntax](https://classic.clinicaltrials.gov/api/gui/ref/syntax)</param>
        /// <param name="postFilter_synonyms">Filter by comma- or pipe-separated list of `area`:`synonym_id` pairs</param>
        /// <param name="aggFilters">Apply aggregation filters, aggregation counts will not be provided.
        /// <br/>The value is comma- or pipe-separated list of pairs `filter_id`:`space-separated list of option keys` for the checked options.</param>
        /// <param name="geoDecay">Set proximity factor by distance from `filter.geo` location to the closest [LocationGeoPoint](/data-api/about-api/study-data-structure#LocationGeoPoint) of a study.
        /// <br/>Ignored, if `filter.geo` parameter is not set or response contains more than 10,000 studies.</param>
        /// <param name="fields">If specified, must be non-empty comma- or pipe-separated list of fields to return. If unspecified, all fields will be returned.
        /// <br/>Order of the fields does not matter.
        /// <br/>
        /// <br/>For `csv` format, specify list of columns. The column names are available on [CSV Download](/data-api/about-api/csv-download).
        /// <br/>
        /// <br/>For `json` format, every list item is either area name, piece name, field name, or special name.
        /// <br/>If a piece or a field is a branch node, all descendant fields will be included.
        /// <br/>All area names are available on [Search Areas](/data-api/about-api/search-areas),
        /// <br/>the piece and field names — on [Data Structure](/data-api/about-api/study-data-structure) and also can be retrieved at `/studies/metadata` endpoint.
        /// <br/>There is a special name, `@query`, which expands to all fields queried by search.</param>
        /// <param name="sort">Comma- or pipe-separated list of sorting options of the studies. The returning studies are not sorted by default for a performance reason.
        /// <br/>Every list item contains a field/piece name and an optional sort direction (`asc` for ascending or `desc` for descending)
        /// <br/>after colon character.
        /// <br/>
        /// <br/>All piece and field names can be found on [Data Structure](/data-api/about-api/study-data-structure) and also can be retrieved
        /// <br/>at `/studies/metadata` endpoint. Currently, only date and numeric fields are allowed for sorting.
        /// <br/>There is a special "field" `@relevance` to sort by relevance to a search query.
        /// <br/>
        /// <br/>Studies missing sort field are always last. Default sort direction:
        /// <br/>* Date field - `desc`
        /// <br/>* Numeric field - `asc`
        /// <br/>* `@relevance` - `desc`</param>
        /// <param name="countTotal">Count total number of studies in all pages and return `totalCount` field with first page, if `true`.
        /// <br/>For CSV, the result can be found in `x-total-count` response header.
        /// <br/>The parameter is ignored for the subsequent pages.</param>
        /// <param name="pageSize">Page size is maximum number of studies to return in response. It does not have to be the same for every page.
        /// <br/>If not specified or set to 0, the default value will be used. It will be coerced down to  1,000, if greater than that.</param>
        /// <param name="pageToken">Token to get next page. Set it to a `nextPageToken` value returned with the previous page in JSON format.
        /// <br/>For CSV, it can be found in `x-next-page-token` response header.
        /// <br/>Do not specify it for first page.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagedStudies> ListStudiesAsync(Format? format, MarkupFormat? markupFormat, string query_cond, string query_term, string query_locn, string query_titles, string query_intr, string query_outc, string query_spons, string query_lead, string query_id, string query_patient, System.Collections.Generic.IEnumerable<Status> filter_overallStatus, string filter_geo, System.Collections.Generic.IEnumerable<string> filter_ids, string filter_advanced, System.Collections.Generic.IEnumerable<string> filter_synonyms, System.Collections.Generic.IEnumerable<Status> postFilter_overallStatus, string postFilter_geo, System.Collections.Generic.IEnumerable<string> postFilter_ids, string postFilter_advanced, System.Collections.Generic.IEnumerable<string> postFilter_synonyms, string aggFilters, string geoDecay, System.Collections.Generic.IEnumerable<string> fields, System.Collections.Generic.IEnumerable<string> sort, bool? countTotal, int? pageSize, string pageToken, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "studies"
                    urlBuilder_.Append("studies");
                    urlBuilder_.Append('?');
                    if (format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (markupFormat != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("markupFormat")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(markupFormat, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (query_cond != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query.cond")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query_cond, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (query_term != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query.term")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query_term, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (query_locn != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query.locn")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query_locn, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (query_titles != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query.titles")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query_titles, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (query_intr != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query.intr")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query_intr, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (query_outc != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query.outc")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query_outc, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (query_spons != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query.spons")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query_spons, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (query_lead != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query.lead")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query_lead, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (query_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query.id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (query_patient != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query.patient")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query_patient, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter_overallStatus != null)
                    {
                        foreach (var item_ in filter_overallStatus) { urlBuilder_.Append(System.Uri.EscapeDataString("filter.overallStatus")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (filter_geo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("filter.geo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter_geo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter_ids != null)
                    {
                        foreach (var item_ in filter_ids) { urlBuilder_.Append(System.Uri.EscapeDataString("filter.ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (filter_advanced != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("filter.advanced")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filter_advanced, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (filter_synonyms != null)
                    {
                        foreach (var item_ in filter_synonyms) { urlBuilder_.Append(System.Uri.EscapeDataString("filter.synonyms")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (postFilter_overallStatus != null)
                    {
                        foreach (var item_ in postFilter_overallStatus) { urlBuilder_.Append(System.Uri.EscapeDataString("postFilter.overallStatus")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (postFilter_geo != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("postFilter.geo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(postFilter_geo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (postFilter_ids != null)
                    {
                        foreach (var item_ in postFilter_ids) { urlBuilder_.Append(System.Uri.EscapeDataString("postFilter.ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (postFilter_advanced != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("postFilter.advanced")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(postFilter_advanced, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (postFilter_synonyms != null)
                    {
                        foreach (var item_ in postFilter_synonyms) { urlBuilder_.Append(System.Uri.EscapeDataString("postFilter.synonyms")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (aggFilters != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("aggFilters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(aggFilters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (geoDecay != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("geoDecay")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(geoDecay, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (countTotal != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("countTotal")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(countTotal, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageToken != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageToken")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageToken, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagedStudies>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            throw new ApiException<string>("Bad request", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Single Study
        /// </summary>
        /// <remarks>
        /// Returns data of a single study.
        /// </remarks>
        /// <param name="nctId">NCT Number of a study</param>
        /// <param name="format">Must be one of the following:
        /// <br/>* `csv`- return CSV table; available fields are listed on [CSV Download](/data-api/about-api/csv-download)
        /// <br/>* `json`- return JSON object; format of `markup` fields depends on `markupFormat` parameter
        /// <br/>* `json.zip`- put JSON object into a .json file and download it as zip archive; field values of type `markup` are in [markdown](https://spec.commonmark.org/0.28/) format
        /// <br/>* `fhir.json` - return FHIR JSON; fields are not customizable</param>
        /// <param name="markupFormat">Format of `markup` type fields:
        /// <br/>* `markdown`- [markdown](https://spec.commonmark.org/0.28/) format
        /// <br/>* `legacy`- compatible with classic PRS
        /// <br/>
        /// <br/>Applicable only to `json` format.</param>
        /// <param name="fields">If specified, must be non-empty comma- or pipe-separated list of fields to return. If unspecified, all fields will be returned.
        /// <br/>Order of the fields does not matter.
        /// <br/>
        /// <br/>For `csv` format, specify list of columns. The column names are available on [CSV Download](/data-api/about-api/csv-download).
        /// <br/>
        /// <br/>For `json` and `json.zip` formats, every list item is either area name, piece name, or field name.
        /// <br/>If a piece or a field is a branch node, all descendant fields will be included.
        /// <br/>All area names are available on [Search Areas](/data-api/about-api/search-areas),
        /// <br/>the piece and field names - on [Data Structure](/data-api/about-api/study-data-structure) and also can be retrieved at `/studies/metadata` endpoint.
        /// <br/>
        /// <br/>For `fhir.json` format, all available fields are returned and this parameter must be unspecified.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> FetchStudyAsync(string nctId, Format2? format, MarkupFormat2? markupFormat, System.Collections.Generic.IEnumerable<string> fields)
        {
            return FetchStudyAsync(nctId, format, markupFormat, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single Study
        /// </summary>
        /// <remarks>
        /// Returns data of a single study.
        /// </remarks>
        /// <param name="nctId">NCT Number of a study</param>
        /// <param name="format">Must be one of the following:
        /// <br/>* `csv`- return CSV table; available fields are listed on [CSV Download](/data-api/about-api/csv-download)
        /// <br/>* `json`- return JSON object; format of `markup` fields depends on `markupFormat` parameter
        /// <br/>* `json.zip`- put JSON object into a .json file and download it as zip archive; field values of type `markup` are in [markdown](https://spec.commonmark.org/0.28/) format
        /// <br/>* `fhir.json` - return FHIR JSON; fields are not customizable</param>
        /// <param name="markupFormat">Format of `markup` type fields:
        /// <br/>* `markdown`- [markdown](https://spec.commonmark.org/0.28/) format
        /// <br/>* `legacy`- compatible with classic PRS
        /// <br/>
        /// <br/>Applicable only to `json` format.</param>
        /// <param name="fields">If specified, must be non-empty comma- or pipe-separated list of fields to return. If unspecified, all fields will be returned.
        /// <br/>Order of the fields does not matter.
        /// <br/>
        /// <br/>For `csv` format, specify list of columns. The column names are available on [CSV Download](/data-api/about-api/csv-download).
        /// <br/>
        /// <br/>For `json` and `json.zip` formats, every list item is either area name, piece name, or field name.
        /// <br/>If a piece or a field is a branch node, all descendant fields will be included.
        /// <br/>All area names are available on [Search Areas](/data-api/about-api/search-areas),
        /// <br/>the piece and field names - on [Data Structure](/data-api/about-api/study-data-structure) and also can be retrieved at `/studies/metadata` endpoint.
        /// <br/>
        /// <br/>For `fhir.json` format, all available fields are returned and this parameter must be unspecified.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> FetchStudyAsync(string nctId, Format2? format, MarkupFormat2? markupFormat, System.Collections.Generic.IEnumerable<string> fields, System.Threading.CancellationToken cancellationToken)
        {
            if (nctId == null)
                throw new System.ArgumentNullException("nctId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/csv"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "studies/{nctId}"
                    urlBuilder_.Append("studies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(nctId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (format != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("format")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (markupFormat != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("markupFormat")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(markupFormat, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            throw new ApiException<string>("Bad request", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            throw new ApiException<string>("Not found", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Data Model Fields
        /// </summary>
        /// <remarks>
        /// Returns study data model fields.
        /// </remarks>
        /// <param name="includeIndexedOnly">Include indexed-only fields, if `true`</param>
        /// <param name="includeHistoricOnly">Include fields available only in historic data, if `true`</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FieldNode>> StudiesMetadataAsync(bool? includeIndexedOnly, bool? includeHistoricOnly)
        {
            return StudiesMetadataAsync(includeIndexedOnly, includeHistoricOnly, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Data Model Fields
        /// </summary>
        /// <remarks>
        /// Returns study data model fields.
        /// </remarks>
        /// <param name="includeIndexedOnly">Include indexed-only fields, if `true`</param>
        /// <param name="includeHistoricOnly">Include fields available only in historic data, if `true`</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FieldNode>> StudiesMetadataAsync(bool? includeIndexedOnly, bool? includeHistoricOnly, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "studies/metadata"
                    urlBuilder_.Append("studies/metadata");
                    urlBuilder_.Append('?');
                    if (includeIndexedOnly != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeIndexedOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeIndexedOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (includeHistoricOnly != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("includeHistoricOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeHistoricOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<FieldNode>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            throw new ApiException<string>("Bad request", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search Areas
        /// </summary>
        /// <remarks>
        /// Search Docs and their Search Areas.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SearchDocument>> SearchAreasAsync()
        {
            return SearchAreasAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search Areas
        /// </summary>
        /// <remarks>
        /// Search Docs and their Search Areas.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SearchDocument>> SearchAreasAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "studies/search-areas"
                    urlBuilder_.Append("studies/search-areas");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SearchDocument>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            throw new ApiException<string>("Bad request", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Enums
        /// </summary>
        /// <remarks>
        /// Returns enumeration types and their values.
        /// <br/>
        /// <br/>Every item of the returning array represents enum type and contains the following properties:
        /// <br/>* `type` - enum type name
        /// <br/>* `pieces` - array of names of all data pieces having the enum type
        /// <br/>* `values` - all available values of the enum; every item contains the following properties:
        /// <br/>  * `value` - data value
        /// <br/>  * `legacyValue` - data value in legacy API
        /// <br/>  * `exceptions` - map from data piece name to legacy value when different from `legacyValue`
        /// <br/>    (some data pieces had special enum values in legacy API)
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EnumInfo>> EnumsAsync()
        {
            return EnumsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enums
        /// </summary>
        /// <remarks>
        /// Returns enumeration types and their values.
        /// <br/>
        /// <br/>Every item of the returning array represents enum type and contains the following properties:
        /// <br/>* `type` - enum type name
        /// <br/>* `pieces` - array of names of all data pieces having the enum type
        /// <br/>* `values` - all available values of the enum; every item contains the following properties:
        /// <br/>  * `value` - data value
        /// <br/>  * `legacyValue` - data value in legacy API
        /// <br/>  * `exceptions` - map from data piece name to legacy value when different from `legacyValue`
        /// <br/>    (some data pieces had special enum values in legacy API)
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EnumInfo>> EnumsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "studies/enums"
                    urlBuilder_.Append("studies/enums");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EnumInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            throw new ApiException<string>("Bad request", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatsClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public StatsClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://clinicaltrials.gov/api/v2";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Study Sizes
        /// </summary>
        /// <remarks>
        /// Statistics of study JSON sizes.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GzipStats> SizeStatsAsync()
        {
            return SizeStatsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Study Sizes
        /// </summary>
        /// <remarks>
        /// Statistics of study JSON sizes.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GzipStats> SizeStatsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stats/size"
                    urlBuilder_.Append("stats/size");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GzipStats>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            throw new ApiException<string>("Bad request", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Field Values
        /// </summary>
        /// <remarks>
        /// Value statistics of the study leaf fields.
        /// </remarks>
        /// <param name="types">Filter by field types</param>
        /// <param name="fields">Filter by piece names or field paths of leaf fields.
        /// <br/>See [Data Structure](/data-api/about-api/study-data-structure) for the available values.
        /// <br/>
        /// <br/>If specified, must be non-empty comma- or pipe-separated list of fields to return.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FieldValuesStats>> FieldValuesStatsAsync(System.Collections.Generic.IEnumerable<FieldStatsType> types, System.Collections.Generic.IEnumerable<string> fields)
        {
            return FieldValuesStatsAsync(types, fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Field Values
        /// </summary>
        /// <remarks>
        /// Value statistics of the study leaf fields.
        /// </remarks>
        /// <param name="types">Filter by field types</param>
        /// <param name="fields">Filter by piece names or field paths of leaf fields.
        /// <br/>See [Data Structure](/data-api/about-api/study-data-structure) for the available values.
        /// <br/>
        /// <br/>If specified, must be non-empty comma- or pipe-separated list of fields to return.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FieldValuesStats>> FieldValuesStatsAsync(System.Collections.Generic.IEnumerable<FieldStatsType> types, System.Collections.Generic.IEnumerable<string> fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stats/field/values"
                    urlBuilder_.Append("stats/field/values");
                    urlBuilder_.Append('?');
                    if (types != null)
                    {
                        foreach (var item_ in types) { urlBuilder_.Append(System.Uri.EscapeDataString("types")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<FieldValuesStats>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            throw new ApiException<string>("Bad request", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            throw new ApiException<string>("Not found", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Field Sizes
        /// </summary>
        /// <remarks>
        /// Sizes of list/array fields.
        /// <br/>
        /// <br/>To search studies by a list field size, use `AREA[FieldName:size]` search operator.
        /// <br/>For example, [AREA\[Phase:size\] 2](https://clinicaltrials.gov/search?term=AREA%5BPhase:size%5D%202)
        /// <br/>query finds studies with 2 phases.
        /// </remarks>
        /// <param name="fields">Filter by piece names or field paths of leaf fields.
        /// <br/>See [Data Structure](/data-api/about-api/study-data-structure) for the available values.
        /// <br/>
        /// <br/>If specified, must be non-empty comma- or pipe-separated list of fields to return.
        /// <br/>If unspecified, all available stats will be returned.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListSizes>> ListFieldSizesStatsAsync(System.Collections.Generic.IEnumerable<string> fields)
        {
            return ListFieldSizesStatsAsync(fields, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Field Sizes
        /// </summary>
        /// <remarks>
        /// Sizes of list/array fields.
        /// <br/>
        /// <br/>To search studies by a list field size, use `AREA[FieldName:size]` search operator.
        /// <br/>For example, [AREA\[Phase:size\] 2](https://clinicaltrials.gov/search?term=AREA%5BPhase:size%5D%202)
        /// <br/>query finds studies with 2 phases.
        /// </remarks>
        /// <param name="fields">Filter by piece names or field paths of leaf fields.
        /// <br/>See [Data Structure](/data-api/about-api/study-data-structure) for the available values.
        /// <br/>
        /// <br/>If specified, must be non-empty comma- or pipe-separated list of fields to return.
        /// <br/>If unspecified, all available stats will be returned.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListSizes>> ListFieldSizesStatsAsync(System.Collections.Generic.IEnumerable<string> fields, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "stats/field/sizes"
                    urlBuilder_.Append("stats/field/sizes");
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                        foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ListSizes>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            throw new ApiException<string>("Bad request", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            throw new ApiException<string>("Not found", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VersionClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public VersionClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://clinicaltrials.gov/api/v2";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// API and data versions.
        /// <br/>
        /// <br/>API version follows [Semantic Versioning 2.0.0 Schema](https://semver.org/spec/v2.0.0.html).
        /// <br/>Data version is UTC timestamp in `yyyy-MM-dd'T'HH:mm:ss` format.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Version> VersionAsync()
        {
            return VersionAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Version
        /// </summary>
        /// <remarks>
        /// API and data versions.
        /// <br/>
        /// <br/>API version follows [Semantic Versioning 2.0.0 Schema](https://semver.org/spec/v2.0.0.html).
        /// <br/>Data version is UTC timestamp in `yyyy-MM-dd'T'HH:mm:ss` format.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Version> VersionAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "version"
                    urlBuilder_.Append("version");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Version>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            throw new ApiException<string>("Bad request", status_, responseData_, headers_, result_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldNode
    {

        [System.Text.Json.Serialization.JsonPropertyName("altPieceNames")]
        public System.Collections.Generic.ICollection<string> AltPieceNames { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("children")]
        public System.Collections.Generic.ICollection<FieldNode> Children { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dedLink")]
        public WebLink DedLink { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("historicOnly")]
        public bool HistoricOnly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("indexedOnly")]
        public bool IndexedOnly { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isEnum")]
        public bool IsEnum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxChars")]
        public int MaxChars { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nested")]
        public bool Nested { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("piece")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Piece { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("rules")]
        public string Rules { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sourceType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SourceType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("synonyms")]
        public bool Synonyms { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebLink
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldNodeList : System.Collections.ObjectModel.Collection<FieldNode>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchDocument
    {

        [System.Text.Json.Serialization.JsonPropertyName("areas")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SearchArea> Areas { get; set; } = new System.Collections.ObjectModel.Collection<SearchArea>();

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchArea
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("param")]
        public string Param { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SearchPart> Parts { get; set; } = new System.Collections.ObjectModel.Collection<SearchPart>();

        [System.Text.Json.Serialization.JsonPropertyName("uiLabel")]
        public string UiLabel { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchPart
    {

        [System.Text.Json.Serialization.JsonPropertyName("isEnum")]
        public bool IsEnum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isSynonyms")]
        public bool IsSynonyms { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pieces")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Pieces { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        public float Weight { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchDocumentList : System.Collections.ObjectModel.Collection<SearchDocument>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnumInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("pieces")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Pieces { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("values")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<EnumItem> Values { get; set; } = new System.Collections.ObjectModel.Collection<EnumItem>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnumItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("exceptions")]
        public object Exceptions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("legacyValue")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LegacyValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnumInfoList : System.Collections.ObjectModel.Collection<EnumInfo>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GzipStats
    {

        [System.Text.Json.Serialization.JsonPropertyName("averageSizeBytes")]
        public int AverageSizeBytes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("largestStudies")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StudySize> LargestStudies { get; set; } = new System.Collections.ObjectModel.Collection<StudySize>();

        [System.Text.Json.Serialization.JsonPropertyName("percentiles")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Percentiles { get; set; } = new object();

        [System.Text.Json.Serialization.JsonPropertyName("ranges")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DistItem> Ranges { get; set; } = new System.Collections.ObjectModel.Collection<DistItem>();

        [System.Text.Json.Serialization.JsonPropertyName("totalStudies")]
        public int TotalStudies { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StudySize
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sizeBytes")]
        public int SizeBytes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DistItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("sizeRange")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SizeRange { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("studiesCount")]
        public int StudiesCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListSizes
    {

        [System.Text.Json.Serialization.JsonPropertyName("field")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Field { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maxSize")]
        public int MaxSize { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("minSize")]
        public int MinSize { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("piece")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Piece { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("topSizes")]
        public System.Collections.Generic.ICollection<ListSize> TopSizes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("uniqueSizesCount")]
        public long UniqueSizesCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListSize
    {

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public int Size { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("studiesCount")]
        public int StudiesCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListSizesList : System.Collections.ObjectModel.Collection<ListSizes>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnumStats
    {

        [System.Text.Json.Serialization.JsonPropertyName("field")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Field { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("missingStudiesCount")]
        public int MissingStudiesCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("piece")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Piece { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("topValues")]
        public System.Collections.Generic.ICollection<ValueCount> TopValues { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FieldStatsType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("uniqueValuesCount")]
        public long UniqueValuesCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValueCount
    {

        [System.Text.Json.Serialization.JsonPropertyName("studiesCount")]
        public int StudiesCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FieldStatsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENUM")]
        ENUM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"STRING")]
        STRING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DATE")]
        DATE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INTEGER")]
        INTEGER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NUMBER")]
        NUMBER = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BOOLEAN")]
        BOOLEAN = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StringStats
    {

        [System.Text.Json.Serialization.JsonPropertyName("field")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Field { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("longest")]
        public LongestString Longest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("missingStudiesCount")]
        public int MissingStudiesCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("piece")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Piece { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("topValues")]
        public System.Collections.Generic.ICollection<ValueCount> TopValues { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FieldStatsType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("uniqueValuesCount")]
        public long UniqueValuesCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LongestString
    {

        [System.Text.Json.Serialization.JsonPropertyName("length")]
        public int Length { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nctId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NctId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateStats
    {

        [System.Text.Json.Serialization.JsonPropertyName("field")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Field { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("formats")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Formats { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("max")]
        public string Max { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("min")]
        public string Min { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("missingStudiesCount")]
        public int MissingStudiesCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("piece")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Piece { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FieldStatsType Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IntegerStats
    {

        [System.Text.Json.Serialization.JsonPropertyName("avg")]
        public double Avg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("field")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Field { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("max")]
        public long Max { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("min")]
        public long Min { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("missingStudiesCount")]
        public int MissingStudiesCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("piece")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Piece { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FieldStatsType Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NumberStats
    {

        [System.Text.Json.Serialization.JsonPropertyName("avg")]
        public double Avg { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("field")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Field { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("max")]
        public double Max { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("min")]
        public double Min { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("missingStudiesCount")]
        public int MissingStudiesCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("piece")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Piece { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FieldStatsType Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BooleanStats
    {

        [System.Text.Json.Serialization.JsonPropertyName("falseCount")]
        public int FalseCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("field")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Field { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("missingStudiesCount")]
        public int MissingStudiesCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("piece")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Piece { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("trueCount")]
        public int TrueCount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FieldStatsType Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Version
    {

        [System.Text.Json.Serialization.JsonPropertyName("apiVersion")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ApiVersion { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dataTimestamp")]
        public string DataTimestamp { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PagedStudies
    {

        [System.Text.Json.Serialization.JsonPropertyName("nextPageToken")]
        public string NextPageToken { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("studies")]
        [System.ComponentModel.DataAnnotations.Required]
        public StudyList Studies { get; set; } = new StudyList();

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Study
    {

        [System.Text.Json.Serialization.JsonPropertyName("protocolSection")]
        public ProtocolSection ProtocolSection { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resultsSection")]
        public ResultsSection ResultsSection { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("annotationSection")]
        public AnnotationSection AnnotationSection { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documentSection")]
        public DocumentSection DocumentSection { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("derivedSection")]
        public DerivedSection DerivedSection { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasResults")]
        public bool HasResults { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProtocolSection
    {

        [System.Text.Json.Serialization.JsonPropertyName("identificationModule")]
        public IdentificationModule IdentificationModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("statusModule")]
        public StatusModule StatusModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sponsorCollaboratorsModule")]
        public SponsorCollaboratorsModule SponsorCollaboratorsModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("oversightModule")]
        public OversightModule OversightModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("descriptionModule")]
        public DescriptionModule DescriptionModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("conditionsModule")]
        public ConditionsModule ConditionsModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("designModule")]
        public DesignModule DesignModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("armsInterventionsModule")]
        public ArmsInterventionsModule ArmsInterventionsModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("outcomesModule")]
        public OutcomesModule OutcomesModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("eligibilityModule")]
        public EligibilityModule EligibilityModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactsLocationsModule")]
        public ContactsLocationsModule ContactsLocationsModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("referencesModule")]
        public ReferencesModule ReferencesModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ipdSharingStatementModule")]
        public IpdSharingStatementModule IpdSharingStatementModule { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResultsSection
    {

        [System.Text.Json.Serialization.JsonPropertyName("participantFlowModule")]
        public ParticipantFlowModule ParticipantFlowModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("baselineCharacteristicsModule")]
        public BaselineCharacteristicsModule BaselineCharacteristicsModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("outcomeMeasuresModule")]
        public OutcomeMeasuresModule OutcomeMeasuresModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("adverseEventsModule")]
        public AdverseEventsModule AdverseEventsModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("moreInfoModule")]
        public MoreInfoModule MoreInfoModule { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnnotationSection
    {

        [System.Text.Json.Serialization.JsonPropertyName("annotationModule")]
        public AnnotationModule AnnotationModule { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentSection
    {

        [System.Text.Json.Serialization.JsonPropertyName("largeDocumentModule")]
        public LargeDocumentModule LargeDocumentModule { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DerivedSection
    {

        [System.Text.Json.Serialization.JsonPropertyName("miscInfoModule")]
        public MiscInfoModule MiscInfoModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("conditionBrowseModule")]
        public BrowseModule ConditionBrowseModule { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interventionBrowseModule")]
        public BrowseModule InterventionBrowseModule { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentificationModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("nctId")]
        public string NctId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nctIdAliases")]
        public System.Collections.Generic.ICollection<string> NctIdAliases { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orgStudyIdInfo")]
        public OrgStudyIdInfo OrgStudyIdInfo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("secondaryIdInfos")]
        public System.Collections.Generic.ICollection<SecondaryIdInfo> SecondaryIdInfos { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("briefTitle")]
        public string BriefTitle { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("officialTitle")]
        public string OfficialTitle { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("acronym")]
        public string Acronym { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organization")]
        public Organization Organization { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatusModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("statusVerifiedDate")]
        public string StatusVerifiedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("overallStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Status OverallStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastKnownStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Status LastKnownStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("delayedPosting")]
        public bool DelayedPosting { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("whyStopped")]
        public string WhyStopped { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expandedAccessInfo")]
        public ExpandedAccessInfo ExpandedAccessInfo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("startDateStruct")]
        public PartialDateStruct StartDateStruct { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("primaryCompletionDateStruct")]
        public PartialDateStruct PrimaryCompletionDateStruct { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("completionDateStruct")]
        public PartialDateStruct CompletionDateStruct { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("studyFirstSubmitDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset StudyFirstSubmitDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("studyFirstSubmitQcDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset StudyFirstSubmitQcDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("studyFirstPostDateStruct")]
        public DateStruct StudyFirstPostDateStruct { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resultsFirstSubmitDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ResultsFirstSubmitDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resultsFirstSubmitQcDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ResultsFirstSubmitQcDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resultsFirstPostDateStruct")]
        public DateStruct ResultsFirstPostDateStruct { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dispFirstSubmitDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DispFirstSubmitDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dispFirstSubmitQcDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DispFirstSubmitQcDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dispFirstPostDateStruct")]
        public DateStruct DispFirstPostDateStruct { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdateSubmitDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset LastUpdateSubmitDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdatePostDateStruct")]
        public DateStruct LastUpdatePostDateStruct { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SponsorCollaboratorsModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("responsibleParty")]
        public ResponsibleParty ResponsibleParty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("leadSponsor")]
        public Sponsor LeadSponsor { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("collaborators")]
        public System.Collections.Generic.ICollection<Sponsor> Collaborators { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OversightModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("oversightHasDmc")]
        public bool OversightHasDmc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFdaRegulatedDrug")]
        public bool IsFdaRegulatedDrug { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isFdaRegulatedDevice")]
        public bool IsFdaRegulatedDevice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isUnapprovedDevice")]
        public bool IsUnapprovedDevice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isPpsd")]
        public bool IsPpsd { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isUsExport")]
        public bool IsUsExport { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fdaaa801Violation")]
        public bool Fdaaa801Violation { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DescriptionModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("briefSummary")]
        public string BriefSummary { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("detailedDescription")]
        public string DetailedDescription { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConditionsModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("conditions")]
        public System.Collections.Generic.ICollection<string> Conditions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("keywords")]
        public System.Collections.Generic.ICollection<string> Keywords { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DesignModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("studyType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StudyType StudyType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nPtrsToThisExpAccNctId")]
        public double NPtrsToThisExpAccNctId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("expandedAccessTypes")]
        public ExpandedAccessTypes ExpandedAccessTypes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("patientRegistry")]
        public bool PatientRegistry { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("targetDuration")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+ (Year|Years|Month|Months|Week|Weeks|Day|Days|Hour|Hours|Minute|Minutes)$")]
        public string TargetDuration { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phases")]

        public System.Collections.Generic.ICollection<Phase> Phases { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("designInfo")]
        public DesignInfo DesignInfo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bioSpec")]
        public BioSpec BioSpec { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("enrollmentInfo")]
        public EnrollmentInfo EnrollmentInfo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArmsInterventionsModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("armGroups")]
        public System.Collections.Generic.ICollection<ArmGroup> ArmGroups { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interventions")]
        public System.Collections.Generic.ICollection<Intervention> Interventions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutcomesModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("primaryOutcomes")]
        public System.Collections.Generic.ICollection<Outcome> PrimaryOutcomes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("secondaryOutcomes")]
        public System.Collections.Generic.ICollection<Outcome> SecondaryOutcomes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otherOutcomes")]
        public System.Collections.Generic.ICollection<Outcome> OtherOutcomes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EligibilityModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("eligibilityCriteria")]
        public string EligibilityCriteria { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("healthyVolunteers")]
        public bool HealthyVolunteers { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sex")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Sex Sex { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("genderBased")]
        public bool GenderBased { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("genderDescription")]
        public string GenderDescription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("minimumAge")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+ (Year|Years|Month|Months|Week|Weeks|Day|Days|Hour|Hours|Minute|Minutes)$")]
        public string MinimumAge { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maximumAge")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d+ (Year|Years|Month|Months|Week|Weeks|Day|Days|Hour|Hours|Minute|Minutes)$")]
        public string MaximumAge { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("stdAges")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<StandardAge> StdAges { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("studyPopulation")]
        public string StudyPopulation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("samplingMethod")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SamplingMethod SamplingMethod { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactsLocationsModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("centralContacts")]
        public System.Collections.Generic.ICollection<Contact> CentralContacts { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("overallOfficials")]
        public System.Collections.Generic.ICollection<Official> OverallOfficials { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("locations")]
        public System.Collections.Generic.ICollection<Location> Locations { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReferencesModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("references")]
        public System.Collections.Generic.ICollection<Reference> References { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("seeAlsoLinks")]
        public System.Collections.Generic.ICollection<SeeAlsoLink> SeeAlsoLinks { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("availIpds")]
        public System.Collections.Generic.ICollection<AvailIpd> AvailIpds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutcomeMeasuresModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("outcomeMeasures")]
        public System.Collections.Generic.ICollection<OutcomeMeasure> OutcomeMeasures { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MoreInfoModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("limitationsAndCaveats")]
        public LimitationsAndCaveats LimitationsAndCaveats { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("certainAgreement")]
        public CertainAgreement CertainAgreement { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pointOfContact")]
        public PointOfContact PointOfContact { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnnotationModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("unpostedAnnotation")]
        public UnpostedAnnotation UnpostedAnnotation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("violationAnnotation")]
        public ViolationAnnotation ViolationAnnotation { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MiscInfoModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("versionHolder")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset VersionHolder { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("removedCountries")]
        public System.Collections.Generic.ICollection<string> RemovedCountries { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("submissionTracking")]
        public SubmissionTracking SubmissionTracking { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnpostedAnnotation
    {

        [System.Text.Json.Serialization.JsonPropertyName("unpostedResponsibleParty")]
        public string UnpostedResponsibleParty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unpostedEvents")]
        public System.Collections.Generic.ICollection<UnpostedEvent> UnpostedEvents { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ViolationAnnotation
    {

        [System.Text.Json.Serialization.JsonPropertyName("violationEvents")]
        public System.Collections.Generic.ICollection<ViolationEvent> ViolationEvents { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubmissionTracking
    {

        [System.Text.Json.Serialization.JsonPropertyName("estimatedResultsFirstSubmitDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset EstimatedResultsFirstSubmitDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("firstMcpInfo")]
        public FirstMcpInfo FirstMcpInfo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("submissionInfos")]
        public System.Collections.Generic.ICollection<SubmissionInfo> SubmissionInfos { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModelPredictions
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BmiLimits
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EnrollmentInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EnrollmentType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BioSpec
    {

        [System.Text.Json.Serialization.JsonPropertyName("retention")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BioSpecRetention Retention { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SeeAlsoLink
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FirstMcpInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("postDateStruct")]
        public DateStruct PostDateStruct { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExpandedAccessTypes
    {

        [System.Text.Json.Serialization.JsonPropertyName("individual")]
        public bool Individual { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("intermediate")]
        public bool Intermediate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("treatment")]
        public bool Treatment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Intervention
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InterventionType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("armGroupLabels")]
        public System.Collections.Generic.ICollection<string> ArmGroupLabels { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otherNames")]
        public System.Collections.Generic.ICollection<string> OtherNames { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecondaryIdInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SecondaryIdType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("domain")]
        public string Domain { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("link")]
        public string Link { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailIpd
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public string Url { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        public string Comment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LimitationsAndCaveats
    {

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DateStruct
    {

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DateType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubmissionInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("releaseDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ReleaseDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unreleaseDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset UnreleaseDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unreleaseDateUnknown")]
        public bool UnreleaseDateUnknown { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resetDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ResetDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("mcpReleaseN")]
        public int McpReleaseN { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExpandedAccessInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("hasExpandedAccess")]
        public bool HasExpandedAccess { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nctId")]
        public string NctId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("statusForNctId")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ExpandedAccessStatus StatusForNctId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdverseEventsModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("frequencyThreshold")]
        public string FrequencyThreshold { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeFrame")]
        public string TimeFrame { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("allCauseMortalityComment")]
        public string AllCauseMortalityComment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("eventGroups")]
        public System.Collections.Generic.ICollection<EventGroup> EventGroups { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("seriousEvents")]
        public System.Collections.Generic.ICollection<AdverseEvent> SeriousEvents { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otherEvents")]
        public System.Collections.Generic.ICollection<AdverseEvent> OtherEvents { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ViolationEvent
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ViolationEventType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("creationDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset CreationDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("issuedDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset IssuedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("releaseDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ReleaseDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postedDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset PostedDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArmGroup
    {

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ArmGroupType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interventionNames")]
        public System.Collections.Generic.ICollection<string> InterventionNames { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DesignInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("allocation")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DesignAllocation Allocation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interventionModel")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InterventionalAssignment InterventionModel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("interventionModelDescription")]
        public string InterventionModelDescription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("primaryPurpose")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PrimaryPurpose PrimaryPurpose { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("observationalModel")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ObservationalModel ObservationalModel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timePerspective")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DesignTimePerspective TimePerspective { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maskingInfo")]
        public MaskingBlock MaskingInfo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Organization
    {

        [System.Text.Json.Serialization.JsonPropertyName("fullName")]
        public string FullName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("class")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AgencyClass Class { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PointOfContact
    {

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organization")]
        public string Organization { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneExt")]
        public string PhoneExt { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IpdSharingStatementModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("ipdSharing")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public IpdSharing IpdSharing { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("infoTypes")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<IpdSharingInfoType> InfoTypes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeFrame")]
        public string TimeFrame { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accessCriteria")]
        public string AccessCriteria { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrgStudyIdInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OrgStudyIdType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("link")]
        public string Link { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponsibleParty
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ResponsiblePartyType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("investigatorFullName")]
        public string InvestigatorFullName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("investigatorTitle")]
        public string InvestigatorTitle { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("investigatorAffiliation")]
        public string InvestigatorAffiliation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("oldNameTitle")]
        public string OldNameTitle { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("oldOrganization")]
        public string OldOrganization { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertainAgreement
    {

        [System.Text.Json.Serialization.JsonPropertyName("piSponsorEmployee")]
        public bool PiSponsorEmployee { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("restrictionType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AgreementRestrictionType RestrictionType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("restrictiveAgreement")]
        public bool RestrictiveAgreement { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otherDetails")]
        public string OtherDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnpostedEvent
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public UnpostedEventType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dateUnknown")]
        public bool DateUnknown { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("role")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContactRole Role { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string Phone { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneExt")]
        public string PhoneExt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartialDateStruct
    {

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        public string Date { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DateType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Outcome
    {

        [System.Text.Json.Serialization.JsonPropertyName("measure")]
        public string Measure { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeFrame")]
        public string TimeFrame { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutcomeMeasure
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OutcomeMeasureType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("populationDescription")]
        public string PopulationDescription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reportingStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ReportingStatus ReportingStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("anticipatedPostingDate")]
        public string AnticipatedPostingDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paramType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MeasureParam ParamType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dispersionType")]
        public string DispersionType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string UnitOfMeasure { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("calculatePct")]
        public bool CalculatePct { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("timeFrame")]
        public string TimeFrame { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeUnitsAnalyzed")]
        public string TypeUnitsAnalyzed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("denomUnitsSelected")]
        public string DenomUnitsSelected { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<MeasureGroup> Groups { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("denoms")]
        public System.Collections.Generic.ICollection<Denom> Denoms { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("classes")]
        public System.Collections.Generic.ICollection<MeasureClass> Classes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("analyses")]
        public System.Collections.Generic.ICollection<MeasureAnalysis> Analyses { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaselineCharacteristicsModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("populationDescription")]
        public string PopulationDescription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeUnitsAnalyzed")]
        public string TypeUnitsAnalyzed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<MeasureGroup> Groups { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("denoms")]
        public System.Collections.Generic.ICollection<Denom> Denoms { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("measures")]
        public System.Collections.Generic.ICollection<BaselineMeasure> Measures { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference
    {

        [System.Text.Json.Serialization.JsonPropertyName("pmid")]
        public string Pmid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ReferenceType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("citation")]
        public string Citation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("retractions")]
        public System.Collections.Generic.ICollection<Retraction> Retractions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParticipantFlowModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("preAssignmentDetails")]
        public string PreAssignmentDetails { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recruitmentDetails")]
        public string RecruitmentDetails { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("typeUnitsAnalyzed")]
        public string TypeUnitsAnalyzed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<FlowGroup> Groups { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("periods")]
        public System.Collections.Generic.ICollection<FlowPeriod> Periods { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LargeDocumentModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("noSap")]
        public bool NoSap { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("largeDocs")]
        public System.Collections.Generic.ICollection<LargeDoc> LargeDocs { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Location
    {

        [System.Text.Json.Serialization.JsonPropertyName("facility")]
        public string Facility { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RecruitmentStatus Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string City { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string State { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("zip")]
        public string Zip { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string Country { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contacts")]
        public System.Collections.Generic.ICollection<Contact> Contacts { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("geoPoint")]
        public GeoPoint GeoPoint { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sponsor
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("class")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AgencyClass Class { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrowseModule
    {

        [System.Text.Json.Serialization.JsonPropertyName("meshes")]
        public System.Collections.Generic.ICollection<Mesh> Meshes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ancestors")]
        public System.Collections.Generic.ICollection<Mesh> Ancestors { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("browseLeaves")]
        public System.Collections.Generic.ICollection<BrowseLeaf> BrowseLeaves { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("browseBranches")]
        public System.Collections.Generic.ICollection<BrowseBranch> BrowseBranches { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Official
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("affiliation")]
        public string Affiliation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("role")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OfficialRole Role { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrowseLeaf
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("asFound")]
        public string AsFound { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("relevance")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BrowseLeafRelevance Relevance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MaskingBlock
    {

        [System.Text.Json.Serialization.JsonPropertyName("masking")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DesignMasking Masking { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("maskingDescription")]
        public string MaskingDescription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("whoMasked")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<WhoMasked> WhoMasked { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventGroup
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deathsNumAffected")]
        public int DeathsNumAffected { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("deathsNumAtRisk")]
        public int DeathsNumAtRisk { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("seriousNumAffected")]
        public int SeriousNumAffected { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("seriousNumAtRisk")]
        public int SeriousNumAtRisk { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otherNumAffected")]
        public int OtherNumAffected { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otherNumAtRisk")]
        public int OtherNumAtRisk { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mesh
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("term")]
        public string Term { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlowGroup
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MeasureAnalysis
    {

        [System.Text.Json.Serialization.JsonPropertyName("paramType")]
        public string ParamType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paramValue")]
        public string ParamValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dispersionType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AnalysisDispersionType DispersionType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dispersionValue")]
        public string DispersionValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("statisticalMethod")]
        public string StatisticalMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("statisticalComment")]
        public string StatisticalComment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pValue")]
        public string PValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("pValueComment")]
        public string PValueComment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ciNumSides")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ConfidenceIntervalNumSides CiNumSides { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ciPctValue")]
        public string CiPctValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ciLowerLimit")]
        public string CiLowerLimit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ciUpperLimit")]
        public string CiUpperLimit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ciLowerLimitComment")]
        public string CiLowerLimitComment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ciUpperLimitComment")]
        public string CiUpperLimitComment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("estimateComment")]
        public string EstimateComment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("testedNonInferiority")]
        public bool TestedNonInferiority { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nonInferiorityType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public NonInferiorityType NonInferiorityType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("nonInferiorityComment")]
        public string NonInferiorityComment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("otherAnalysisDescription")]
        public string OtherAnalysisDescription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("groupDescription")]
        public string GroupDescription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("groupIds")]
        public System.Collections.Generic.ICollection<string> GroupIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdverseEvent
    {

        [System.Text.Json.Serialization.JsonPropertyName("term")]
        public string Term { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("organSystem")]
        public string OrganSystem { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sourceVocabulary")]
        public string SourceVocabulary { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("assessmentType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EventAssessment AssessmentType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string Notes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("stats")]
        public System.Collections.Generic.ICollection<EventStats> Stats { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Retraction
    {

        [System.Text.Json.Serialization.JsonPropertyName("pmid")]
        public string Pmid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        public string Source { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Denom
    {

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        public string Units { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("counts")]
        public System.Collections.Generic.ICollection<DenomCount> Counts { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlowPeriod
    {

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("milestones")]
        public System.Collections.Generic.ICollection<FlowMilestone> Milestones { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dropWithdraws")]
        public System.Collections.Generic.ICollection<DropWithdraw> DropWithdraws { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MeasureGroup
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MeasureClass
    {

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("denoms")]
        public System.Collections.Generic.ICollection<Denom> Denoms { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("categories")]
        public System.Collections.Generic.ICollection<MeasureCategory> Categories { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrowseBranch
    {

        [System.Text.Json.Serialization.JsonPropertyName("abbrev")]
        public string Abbrev { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaselineMeasure
    {

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("populationDescription")]
        public string PopulationDescription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paramType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MeasureParam ParamType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dispersionType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MeasureDispersionType DispersionType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string UnitOfMeasure { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("calculatePct")]
        public bool CalculatePct { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("denomUnitsSelected")]
        public string DenomUnitsSelected { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("denoms")]
        public System.Collections.Generic.ICollection<Denom> Denoms { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("classes")]
        public System.Collections.Generic.ICollection<MeasureClass> Classes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LargeDoc
    {

        [System.Text.Json.Serialization.JsonPropertyName("typeAbbrev")]
        public string TypeAbbrev { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasProtocol")]
        public bool HasProtocol { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasSap")]
        public bool HasSap { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasIcf")]
        public bool HasIcf { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string Label { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("uploadDate")]
        public string UploadDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("filename")]
        public string Filename { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public int Size { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DropWithdraw
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        public string Comment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reasons")]
        public System.Collections.Generic.ICollection<FlowStats> Reasons { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DenomCount
    {

        [System.Text.Json.Serialization.JsonPropertyName("groupId")]
        public string GroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventStats
    {

        [System.Text.Json.Serialization.JsonPropertyName("groupId")]
        public string GroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numEvents")]
        public int NumEvents { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numAffected")]
        public int NumAffected { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numAtRisk")]
        public int NumAtRisk { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MeasureCategory
    {

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("measurements")]
        public System.Collections.Generic.ICollection<Measurement> Measurements { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlowMilestone
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        public string Comment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("achievements")]
        public System.Collections.Generic.ICollection<FlowStats> Achievements { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlowStats
    {

        [System.Text.Json.Serialization.JsonPropertyName("groupId")]
        public string GroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        public string Comment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numSubjects")]
        public string NumSubjects { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("numUnits")]
        public string NumUnits { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Measurement
    {

        [System.Text.Json.Serialization.JsonPropertyName("groupId")]
        public string GroupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("spread")]
        public string Spread { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lowerLimit")]
        public string LowerLimit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("upperLimit")]
        public string UpperLimit { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        public string Comment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_NOT_RECRUITING")]
        ACTIVE_NOT_RECRUITING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ENROLLING_BY_INVITATION")]
        ENROLLING_BY_INVITATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_YET_RECRUITING")]
        NOT_YET_RECRUITING = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RECRUITING")]
        RECRUITING = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SUSPENDED")]
        SUSPENDED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TERMINATED")]
        TERMINATED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHDRAWN")]
        WITHDRAWN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE")]
        AVAILABLE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"NO_LONGER_AVAILABLE")]
        NO_LONGER_AVAILABLE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"TEMPORARILY_NOT_AVAILABLE")]
        TEMPORARILY_NOT_AVAILABLE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVED_FOR_MARKETING")]
        APPROVED_FOR_MARKETING = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHHELD")]
        WITHHELD = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StudyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXPANDED_ACCESS")]
        EXPANDED_ACCESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INTERVENTIONAL")]
        INTERVENTIONAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OBSERVATIONAL")]
        OBSERVATIONAL = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [JsonConverter(typeof(JsonStringEnumConverter<Phase>))]
    public enum Phase
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NA")]
        NA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EARLY_PHASE1")]
        EARLY_PHASE1 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PHASE1")]
        PHASE1 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PHASE2")]
        PHASE2 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PHASE3")]
        PHASE3 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PHASE4")]
        PHASE4 = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Sex
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEMALE")]
        FEMALE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MALE")]
        MALE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StandardAge
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CHILD")]
        CHILD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ADULT")]
        ADULT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OLDER_ADULT")]
        OLDER_ADULT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SamplingMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROBABILITY_SAMPLE")]
        PROBABILITY_SAMPLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_PROBABILITY_SAMPLE")]
        NON_PROBABILITY_SAMPLE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IpdSharing
    {

        [System.Runtime.Serialization.EnumMember(Value = @"YES")]
        YES = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NO")]
        NO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNDECIDED")]
        UNDECIDED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IpdSharingInfoType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STUDY_PROTOCOL")]
        STUDY_PROTOCOL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAP")]
        SAP = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ICF")]
        ICF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CSR")]
        CSR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ANALYTIC_CODE")]
        ANALYTIC_CODE = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrgStudyIdType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NIH")]
        NIH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FDA")]
        FDA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VA")]
        VA = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CDC")]
        CDC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AHRQ")]
        AHRQ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SAMHSA")]
        SAMHSA = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SecondaryIdType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NIH")]
        NIH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FDA")]
        FDA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VA")]
        VA = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CDC")]
        CDC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AHRQ")]
        AHRQ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SAMHSA")]
        SAMHSA = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER_GRANT")]
        OTHER_GRANT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EUDRACT_NUMBER")]
        EUDRACT_NUMBER = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CTIS")]
        CTIS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"REGISTRY")]
        REGISTRY = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AgencyClass
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NIH")]
        NIH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FED")]
        FED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER_GOV")]
        OTHER_GOV = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INDIV")]
        INDIV = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INDUSTRY")]
        INDUSTRY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NETWORK")]
        NETWORK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AMBIG")]
        AMBIG = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExpandedAccessStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE")]
        AVAILABLE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NO_LONGER_AVAILABLE")]
        NO_LONGER_AVAILABLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TEMPORARILY_NOT_AVAILABLE")]
        TEMPORARILY_NOT_AVAILABLE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"APPROVED_FOR_MARKETING")]
        APPROVED_FOR_MARKETING = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTUAL")]
        ACTUAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTIMATED")]
        ESTIMATED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResponsiblePartyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SPONSOR")]
        SPONSOR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PRINCIPAL_INVESTIGATOR")]
        PRINCIPAL_INVESTIGATOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SPONSOR_INVESTIGATOR")]
        SPONSOR_INVESTIGATOR = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DesignAllocation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RANDOMIZED")]
        RANDOMIZED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_RANDOMIZED")]
        NON_RANDOMIZED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NA")]
        NA = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InterventionalAssignment
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SINGLE_GROUP")]
        SINGLE_GROUP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PARALLEL")]
        PARALLEL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CROSSOVER")]
        CROSSOVER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FACTORIAL")]
        FACTORIAL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SEQUENTIAL")]
        SEQUENTIAL = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PrimaryPurpose
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TREATMENT")]
        TREATMENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PREVENTION")]
        PREVENTION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DIAGNOSTIC")]
        DIAGNOSTIC = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ECT")]
        ECT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPPORTIVE_CARE")]
        SUPPORTIVE_CARE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SCREENING")]
        SCREENING = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"HEALTH_SERVICES_RESEARCH")]
        HEALTH_SERVICES_RESEARCH = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"BASIC_SCIENCE")]
        BASIC_SCIENCE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"DEVICE_FEASIBILITY")]
        DEVICE_FEASIBILITY = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ObservationalModel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"COHORT")]
        COHORT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASE_CONTROL")]
        CASE_CONTROL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CASE_ONLY")]
        CASE_ONLY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CASE_CROSSOVER")]
        CASE_CROSSOVER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ECOLOGIC_OR_COMMUNITY")]
        ECOLOGIC_OR_COMMUNITY = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FAMILY_BASED")]
        FAMILY_BASED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DEFINED_POPULATION")]
        DEFINED_POPULATION = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"NATURAL_HISTORY")]
        NATURAL_HISTORY = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DesignTimePerspective
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RETROSPECTIVE")]
        RETROSPECTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PROSPECTIVE")]
        PROSPECTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CROSS_SECTIONAL")]
        CROSS_SECTIONAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BioSpecRetention
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE_RETAINED")]
        NONE_RETAINED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SAMPLES_WITH_DNA")]
        SAMPLES_WITH_DNA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SAMPLES_WITHOUT_DNA")]
        SAMPLES_WITHOUT_DNA = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EnrollmentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTUAL")]
        ACTUAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTIMATED")]
        ESTIMATED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ArmGroupType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EXPERIMENTAL")]
        EXPERIMENTAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_COMPARATOR")]
        ACTIVE_COMPARATOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PLACEBO_COMPARATOR")]
        PLACEBO_COMPARATOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SHAM_COMPARATOR")]
        SHAM_COMPARATOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NO_INTERVENTION")]
        NO_INTERVENTION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InterventionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BEHAVIORAL")]
        BEHAVIORAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BIOLOGICAL")]
        BIOLOGICAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMBINATION_PRODUCT")]
        COMBINATION_PRODUCT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DEVICE")]
        DEVICE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DIAGNOSTIC_TEST")]
        DIAGNOSTIC_TEST = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DIETARY_SUPPLEMENT")]
        DIETARY_SUPPLEMENT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DRUG")]
        DRUG = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"GENETIC")]
        GENETIC = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PROCEDURE")]
        PROCEDURE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"RADIATION")]
        RADIATION = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContactRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STUDY_CHAIR")]
        STUDY_CHAIR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"STUDY_DIRECTOR")]
        STUDY_DIRECTOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRINCIPAL_INVESTIGATOR")]
        PRINCIPAL_INVESTIGATOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SUB_INVESTIGATOR")]
        SUB_INVESTIGATOR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTACT")]
        CONTACT = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OfficialRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STUDY_CHAIR")]
        STUDY_CHAIR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"STUDY_DIRECTOR")]
        STUDY_DIRECTOR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRINCIPAL_INVESTIGATOR")]
        PRINCIPAL_INVESTIGATOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SUB_INVESTIGATOR")]
        SUB_INVESTIGATOR = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RecruitmentStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE_NOT_RECRUITING")]
        ACTIVE_NOT_RECRUITING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ENROLLING_BY_INVITATION")]
        ENROLLING_BY_INVITATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_YET_RECRUITING")]
        NOT_YET_RECRUITING = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RECRUITING")]
        RECRUITING = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SUSPENDED")]
        SUSPENDED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TERMINATED")]
        TERMINATED = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"WITHDRAWN")]
        WITHDRAWN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AVAILABLE")]
        AVAILABLE = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReferenceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BACKGROUND")]
        BACKGROUND = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RESULT")]
        RESULT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DERIVED")]
        DERIVED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MeasureParam
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GEOMETRIC_MEAN")]
        GEOMETRIC_MEAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GEOMETRIC_LEAST_SQUARES_MEAN")]
        GEOMETRIC_LEAST_SQUARES_MEAN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LEAST_SQUARES_MEAN")]
        LEAST_SQUARES_MEAN = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LOG_MEAN")]
        LOG_MEAN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MEAN")]
        MEAN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIAN")]
        MEDIAN = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NUMBER")]
        NUMBER = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"COUNT_OF_PARTICIPANTS")]
        COUNT_OF_PARTICIPANTS = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"COUNT_OF_UNITS")]
        COUNT_OF_UNITS = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MeasureDispersionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NA")]
        NA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_DEVIATION")]
        STANDARD_DEVIATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_ERROR")]
        STANDARD_ERROR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INTER_QUARTILE_RANGE")]
        INTER_QUARTILE_RANGE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FULL_RANGE")]
        FULL_RANGE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIDENCE_80")]
        CONFIDENCE_80 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIDENCE_90")]
        CONFIDENCE_90 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIDENCE_95")]
        CONFIDENCE_95 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIDENCE_975")]
        CONFIDENCE_975 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIDENCE_99")]
        CONFIDENCE_99 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIDENCE_OTHER")]
        CONFIDENCE_OTHER = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GEOMETRIC_COEFFICIENT")]
        GEOMETRIC_COEFFICIENT = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OutcomeMeasureType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PRIMARY")]
        PRIMARY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SECONDARY")]
        SECONDARY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER_PRE_SPECIFIED")]
        OTHER_PRE_SPECIFIED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"POST_HOC")]
        POST_HOC = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReportingStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_POSTED")]
        NOT_POSTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"POSTED")]
        POSTED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EventAssessment
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NON_SYSTEMATIC_ASSESSMENT")]
        NON_SYSTEMATIC_ASSESSMENT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEMATIC_ASSESSMENT")]
        SYSTEMATIC_ASSESSMENT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AgreementRestrictionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LTE60")]
        LTE60 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GT60")]
        GT60 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BrowseLeafRelevance
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DesignMasking
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SINGLE")]
        SINGLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLE")]
        DOUBLE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TRIPLE")]
        TRIPLE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"QUADRUPLE")]
        QUADRUPLE = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WhoMasked
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PARTICIPANT")]
        PARTICIPANT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CARE_PROVIDER")]
        CARE_PROVIDER = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INVESTIGATOR")]
        INVESTIGATOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OUTCOMES_ASSESSOR")]
        OUTCOMES_ASSESSOR = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AnalysisDispersionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_DEVIATION")]
        STANDARD_DEVIATION = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD_ERROR_OF_MEAN")]
        STANDARD_ERROR_OF_MEAN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConfidenceIntervalNumSides
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ONE_SIDED")]
        ONE_SIDED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TWO_SIDED")]
        TWO_SIDED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NonInferiorityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SUPERIORITY")]
        SUPERIORITY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_INFERIORITY")]
        NON_INFERIORITY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EQUIVALENCE")]
        EQUIVALENCE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_INFERIORITY_OR_EQUIVALENCE")]
        NON_INFERIORITY_OR_EQUIVALENCE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPERIORITY_OR_OTHER")]
        SUPERIORITY_OR_OTHER = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NON_INFERIORITY_OR_EQUIVALENCE_LEGACY")]
        NON_INFERIORITY_OR_EQUIVALENCE_LEGACY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPERIORITY_OR_OTHER_LEGACY")]
        SUPERIORITY_OR_OTHER_LEGACY = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UnpostedEventType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RESET")]
        RESET = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RELEASE")]
        RELEASE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNRELEASE")]
        UNRELEASE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ViolationEventType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VIOLATION_IDENTIFIED")]
        VIOLATION_IDENTIFIED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CORRECTION_CONFIRMED")]
        CORRECTION_CONFIRMED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PENALTY_IMPOSED")]
        PENALTY_IMPOSED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ISSUES_IN_LETTER_ADDRESSED_CONFIRMED")]
        ISSUES_IN_LETTER_ADDRESSED_CONFIRMED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoPoint
    {

        [System.Text.Json.Serialization.JsonPropertyName("lat")]
        public double Lat { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lon")]
        public double Lon { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldValuesStatsList : System.Collections.ObjectModel.Collection<FieldValuesStats>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldValuesStats
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// `study` field values of type `markup` are in markdown format.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StudyList : System.Collections.ObjectModel.Collection<Study>
    {

    }

    /// <summary>
    /// Study in FHIR JSON format
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StudyFhir
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Format
    {

        [System.Runtime.Serialization.EnumMember(Value = @"csv")]
        Csv = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"json")]
        Json = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MarkupFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"markdown")]
        Markdown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"legacy")]
        Legacy = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Format2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"csv")]
        Csv = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"json")]
        Json = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"json.zip")]
        Json_zip = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"fhir.json")]
        Fhir_json = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MarkupFormat2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"markdown")]
        Markdown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"legacy")]
        Legacy = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : System.Text.Json.Serialization.JsonConverter<System.DateTimeOffset>
    {
        public override System.DateTimeOffset Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var dateTime = reader.GetString();
            if (dateTime == null)
            {
                throw new System.Text.Json.JsonException("Unexpected JsonTokenType.Null");
            }

            return System.DateTimeOffset.Parse(dateTime);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, System.DateTimeOffset value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("yyyy-MM-dd"));
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625